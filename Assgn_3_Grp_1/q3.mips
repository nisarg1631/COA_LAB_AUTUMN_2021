###############################################################################
    # Assignment Number: 3
    # Problem Number: 3
    # Semester Number: 5
    # Group Number: 1 
    # Group Members: Animesh Jha(19CS10070), Nisarg Upadhyaya (19CS30031)
###############################################################################

.globl  main
.data

# program output text constants
prompt1:
    .asciiz "Enter four positive integers m, n, a and r:\n"
prompt2:
    .asciiz "Matrix A:\n\n"
prompt3:
    .asciiz "Matrix B:\n\n"
not_positive_prompt:
    .asciiz "Please enter positive integers only.\n"
newline:
    .asciiz "\n"
space:
    .asciiz " "

.text

# main program
#
# program variables
#
#  m: $s0
#  n: $s1
#  a: $s2
#  r: $s3
#  matrix A base address: $s4
#  matrix B base address: $s5

main:
    jal     initStack

    li      $v0, 4          # issue input prompt
    la      $a0, prompt1
    syscall

    li      $v0, 5          # get m from user
    syscall
    move    $s0, $v0
    blez    $s0, not_positive_error     # check m is positive

    li      $v0, 5          # get n from user
    syscall
    move    $s1, $v0
    blez    $s1, not_positive_error     # check n is positive

    li      $v0, 5          # get a from user
    syscall
    move    $s2, $v0
    blez    $s2, not_positive_error     # check a is positive

    li      $v0, 5          # get r from user
    syscall
    move    $s3, $v0
    blez    $s3, not_positive_error     # check r is positive

    # allocate memory for A
    mul     $a0, $s0, $s1   # $a0 = m*n
    jal     mallocInStack   # call mallocInStack with argument m*n
    move    $s4, $v0        # store return value, i.e. base address of A

    # allocate memory for B
    mul     $a0, $s0, $s1   # $a0 = m*n
    jal     mallocInStack   # call mallocInStack with argument m*n
    move    $s5, $v0        # store return value, i.e. base address of B

    # fill A
    li      $t0, 0          # offset = 0
    li      $t1, 1          # multiplier = 1

fillA:
    mul     $t2, $s2, $t1   # $t2 = a*multiplier
    mul     $t3, $t0, 4     # $t3 = 4*offset
    add     $t3, $s4, $t3   # $t3 = base address of A + 4*offset
    sw      $t2, 0($t3)     # store a*multiplier to the location A + 4*offset
    addi    $t0, $t0, 1     # offset++
    mul     $t1, $t1, $s3   # multiplier = multiplier*r
    mul     $t2, $s0, $s1   # $t2 = m*n
    blt		$t0, $t2, fillA	# if offset < m*n then loop

    li      $v0, 4          # issue matrix A print prompt
    la      $a0, prompt2
    syscall

    # print A
    move    $a0, $s0
    move    $a1, $s1
    move    $a2, $s4
    jal     printMatrix     # call print matrix with parameters m, n and A

    # transpose A to B
    move    $a0, $s0
    move    $a1, $s1
    move    $a2, $s4
    move    $a3, $s5
    jal     transposeMatrix # call transpose matrix with parameters m, n, A, and B

    li      $v0, 4          # issue matrix B print prompt
    la      $a0, prompt3
    syscall

    # print B
    move    $a0, $s1
    move    $a1, $s0
    move    $a2, $s5
    jal     printMatrix     # call print matrix with parameters n, m and B

    # deallocate memory stored for 2 stacks
    mul     $t0, $s0, $s1
    mul     $t0, $t0, 4
    add     $sp, $sp, $t0   # deallocate B
    add     $sp, $sp, $t0   # deallocate A

    b       end

not_positive_error:
    li      $v0, 4          # issue not positive prompt
    la      $a0, not_positive_prompt
    syscall

end:
    lw      $fp, 0($sp)     # restore frame pointer
    addi    $sp, $sp, 4     # restore stack pointer
    li      $v0, 10         # terminate program
    syscall

# print function
#
# program variables
#
# m: $a0
# n: $a1
# base address of matrix to print: $a2

printMatrix:
    li      $t0, 0          # offset = 0
    li      $t1, 0          # column_index = 0

printLoop:
    mul     $t2, $t0, 4     # $t2 = 4*offset
    add     $t2, $a2, $t2   # $t2 = base address of A + 4*offset
    lw      $t2, 0($t2)     # load the value at A + 4*offset into $t2

    move    $t3, $a0        # temporarily store m in $t3

    li      $v0, 1          # print $t2
    move    $a0, $t2
    syscall

    li      $v0, 4          # print space
    la      $a0, space
    syscall

    move    $a0, $t3        # restore m in $a0

    addi    $t0, $t0, 1             # offset++
    addi    $t1, $t1, 1             # column_index++
    blt     $t1, $a1, printLoop     # if column_index < n then loop else print newline

    move    $t2, $a0        # temporarily store m in $t2
    
    li      $v0, 4          # print newline
    la      $a0, newline
    syscall
    
    li      $t1, 0          # reset column_index = 0

    move    $a0, $t2        # restore m in $a0

    mul     $t2, $a0, $a1       # $t2 = m*n
    blt		$t0, $t2, printLoop	# if offset < m*n then loop else return

    li      $v0, 4          # print an extra newline for clean output
    la      $a0, newline
    syscall

    jr      $ra

# transpose function
#
# program variables
#
# m: $a0
# n: $a1
# base address of matrix A: $a2
# base address of matrix B: $a3
#
# logic: to compute the transpose it accesses the values in A 
# in column major manner and stores them in B in row major manner

transposeMatrix:
    li      $t0, 0          # row_index = 0
    li      $t1, 0          # column_index = 0
    li      $t2, 0          # offset = 0

transposeLoop:
    mul     $t3, $t0, $a1   # $t3 = row_index*n
    add     $t3, $t3, $t1   # $t3 = column_index + (row_index*n)
    mul     $t3, $t3, 4     # $t3 = 4*(column_index + (row_index*n))
    add     $t3, $t3, $a2   # $t3 = base address of A + 4*(column_index + (row_index*n))
    lw      $t3, 0($t3)     # load the value at A[row_index, column_index] in $t3
    mul     $t4, $t2, 4     # $t4 = 4*offset
    add     $t4, $t4, $a3   # $t4 = base address of B + 4*offset
    sw      $t3, 0($t4)     # store the loaded value in B

    addi    $t0, $t0, 1             # row_index++
    addi    $t2, $t2, 1             # offset++
    blt     $t0, $a0, transposeLoop # if row_index < m then loop else move to next column

    addi    $t1, $t1, 1             # column_index++
    li      $t0, 0                  # reset row_index = 0
    blt     $t1, $a1, transposeLoop # if column_index < n then loop else return

    jr      $ra    

# initStack function
#
# program variables
#
# -

initStack:
    addi    $sp, $sp, -4    # make space for storing frame pointer
    sw      $fp, 0($sp)     # store old frame pointer
    move    $fp, $sp        # update frame pointer to the new base of stack
    jr		$ra

# malloc function
#
# program variables
#
# size: $a0
# return base address: $v0

mallocInStack:
    mul     $t0, $a0, 4
    sub		$sp, $sp, $t0   # sp = sp - (4*size), reserve space in stack
    move    $v0, $sp        # store the base address in $v0
    jr      $ra
    
# push function
#
# program variables
#
# n: $a0

pushToStack:
    addi    $sp, $sp, -4    # make space for storing the new element
    sw      $a0, 0($sp)     # save the new element to stack
    jr      $ra
