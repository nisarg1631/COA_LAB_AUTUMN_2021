###############################################################################
    # Assignment Number: 3
    # Problem Number: 2 
    # Semester Number: 5
    # Group Number: 1 
    # Group Members: Animesh Jha(19CS10070), Nisarg Upadhyaya (19CS30031)
###############################################################################

.globl  main
.data

# program output text constants
array: 
    .space 40    #10 element integer array
prompt_arr:
    .asciiz "Please enter an integer: "
prompt_k:
    .asciiz "Enter the value of k: "
error_big_k:
    .asciiz "ERROR: k entered greater than the length of the array"
.text
sorting_done:
    .asciiz "Sorting of array done"
prompt_k_larg:
    .asciiz "K th largest number is: "

# main program
#
# program variables

#   k:   $s1
#   n: $s2
#   i:  $t0
#   n-k: $t1

main:
    # read array from user
    li $s2,10

    jal read_func

    jal input_k

    move $a1, $s2  # store N in $a1
    jal sort_array_func

    move $a1,$s2    # store N in $a1
    jal print_array

    li      $v0, 4          # print ans
    la      $a0, prompt_k_larg
    syscall

    sub $t1,$s2,$s1    
    sll $t1,$t1,2
    lw $t2, array($t1)

    li      $v0, 1      
    move    $a0, $t2
    syscall

    j end

read_func:
    li $t0,0
    b read_loop
    jr $ra 

read_loop:        
    
    li $v0,4
    la $a0,prompt_arr
    syscall
    
    li $v0,5
    syscall
    sw $v0,array($t0)

    add $t0,$t0,4
    beq $t0,40,read_func
    j read_loop
    
input_k:
    li $v0,4
    la $a0,prompt_k
    syscall
    
    li $v0,5
    syscall
    move $s1, $v0
    bge $s1,$s2,big_k
    jr $ra 


# not i have switched i and j from that given in the pseudocode, i is used outside and j inside
# Registers:
#   $a1: N
#   $t0: i
#   $t1: j
#   $t2: value of A[i] or A[j]
#   $t3: value of x (current A[i])
#   $t4: offset
sort_array_func:
    li $t0,1
    j for_outer_start

for_outer_start:
    blt $t0,$a2,for_outer_body # i < n then go to body

    li      $v0, 4          # say sorting is done
    la      $a0, sorting_done
    syscall
    jr $ra                      #return 

for_outer_body:
    sll $t4, $t0, 2    # scale index i to offset
    lw $t3,array($t4)  # store a[i] in x
    addi $t1,$t0,-1    # j = i-1
    j while_inner_start  

while_inner_start:
    blt $t1,$zero,while_inner_end # if j<0 break (same as checking i>0)
    sll $t4,$t1,2              # scale j
    lw $t2,array($t4)           # store A[j]
    bgt $t2,$t3,while_inner_body   # is A[j]>x 

while_inner_body:
    sll  $t4, $t1, 2      # scale j
    lw $t2,array($t4)     # load A[j]
    addi $t4,$t4,4        # j = j+1
    sw $t2, array($t4)      # save A[j+1]=A[j]
    addi $t1,$t1,-1        # j=j-1

while_inner_end:
    add $t4,$t1,1         # j =j +1
    sll $t4,$t4,2         # scale j+1
    sw $t3,array($t4)     #  A[j+1] = x
    add $t0, $t0, 1       # i=i+1

# Registers:
#   $a1: N 
#   $t0: i
#   $t2: 4*i 
print_array:
    li $v0,0
    li $t0,0
    li $t2,0
print_for_loop:
    bge $t0,$a1,func_end

    lw $t1,array($t2)
    addi $t2,$t2,4
    
    # syscall to print value
    li      $v0, 1      
    move    $a0, $t2
    syscall

    # syscall number for printing space
    li      $a0, 32
    li      $v0, 11  
    syscall    
    addi $t0,$t0,1
    j print_for_loop
print_func_end:
    li      $v0, 4          # add newline
    la      $a0, newline
    syscall
    jr $ra  

big_k:
    li      $v0, 4          # issue error prompt
    la      $a0, error_big_k
    syscall
    # will now go to end_program

end:
    li      $v0, 4          # add newline
    la      $a0, newline
    syscall
    li      $v0, 10         # terminate program
    syscall


