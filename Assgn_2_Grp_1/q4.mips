###############################################################################
    # Assignment Number: 2
    # Problem Number: 4
    # Semester Number: 5
    # Group Number: 1 
    # Group Members: Animesh Jha(19CS10070), Nisarg Upadhyaya (19CS30031)
###############################################################################

.globl  main
.data

# program output text constants
prompt:
    .asciiz "Please enter a positive integer: "
pos_result:
    .asciiz "The given number is perfect."
neg_result:
    .asciiz "The given number is NOT perfect."
neg_error:
    .asciiz "Error: Non positive integer entered, terminating the program."
newline:
    .asciiz "\n"
.text

# main program
#
# program variables
#   n:   $s0
#   i:   $s1 <- divisor
#   running_sum:   $s2
#   temp: $t0, to store n%i

main:
    li      $v0, 4          # issue prompt for input
    la      $a0, prompt
    syscall

    li      $v0, 5          # get n from user
    syscall
    move    $s0, $v0

    # check if n is a positive integer
    # if not, issue error message and terminate program
    blez    $s0, neg_int_err

    # write the following psuedocode in mips
    # running_sum=1 
    # for (int i=2;i<n;i++)
    # {
    #     if(n%i==0)
    #     {
    #         running_sum = running_sum + i;       
    #     }
    # }   
    # if(running_sum == n)
    # {
    #     print "The given number is perfect.";
    # }
    
    li     $s1, 2          # initialize i to 2
    li     $s2, 1          # initialize running_sum to 1

loop:
    # check if i is greater than n
    # if yes, terminate the loop
    bge     $s1, $s0, end_loop

    # check if n%i is 0
    div     $t0, $s0, $s1   # temp = floor(n/i)
    mul     $t0, $t0, $s1   # temp = i*floor(n/i)
    sub     $t0, $s0, $t0   # temp = n-temp, temp is basically n%i
    
    # if yes, add i to running_sum
    beqz     $t0, add_to_run_sum    # if temp == 0 => n%i==0 then n is divisible by i
    
    addi    $s1, $s1, 1  # i++
    j       loop        # loop
    
add_to_run_sum:
    add     $s2, $s2, $s1  # running_sum = running_sum + i
    addi    $s1, $s1, 1  # i++
    j      loop

end_loop:

    beq     $s2, $s0, print_pos_result # check if running_sum is equal to n

    li      $v0, 4          # print neg result ( n is not perfect )
    la      $a0, neg_result
    syscall
    j       end

print_pos_result:
    li      $v0, 4          # print pos result ( n is perfect )
    la      $a0, pos_result
    syscall
    j end

neg_int_err:
    li      $v0, 4          # prints error n<=0
    la      $a0, neg_error
    syscall  
    # will now go to end_program

end:
    li      $v0, 4          # add newline
    la      $a0, newline
    syscall
    li      $v0, 10         # terminate program
    syscall
